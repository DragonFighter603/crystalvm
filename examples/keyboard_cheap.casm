#SCREEN_BUF_1 0x00000000
#SCREEN_BUF_2 0x0003E800
#TEXT_BUF_1 0x0007D000
#TEXT_BUF_2 0x0007D400

#SCREEN_W 320
#SCREEN_H 200
#TEXT_W 40
#TEXT_H 25

#INTERRUPT 0x0008DE00
#START 0x0008E000

#regids [f'%{id:02X}' for id in range(49)]
#newreg lambda: regids.pop(0)
#dropreg lambda x: (regids.append(x), regids.sort())


; this implementation just expects the first attached device to be the keyboard and thus bypasses all the checks

~@INTERRUPT
    #f TEXT_BUF_1+20
    move @f %0
    stb %0 65

    cmpu %D 0
    jnz @handle
    ret
    #handle $
        pshar

        cmpu %Q 0b0000
        jz @device_connect
        cmpu %Q 0b0001
        jz @device_read_complete
        cmpu %Q 0b0010
        jz @device_write_complete
        ; cmpu %Q 0b0011 -> check redundant, as its the only type left
        jmp @device_disconnect

        #device_connect $
            dread %D @STR_16_BUF 16
            breakpoint "i1"
            jmp @finish_handling

        #device_disconnect $
            jmp @finish_handling

        #device_read_complete $
            dread %D @KEY_DATA 7
            
            #text newreg()
            #flags newreg()
            #temp newreg()

            ldb @KEY_DATA_TEXT @text
            ldb @KEY_DATA_FLAGS @flags
            ; extract "is_down" bit
            or @flags 0b1000_0000 @flags

            ; key not down?
            cmpu @flags 0b1000_0000
            jnz @update_keys

            ; either new key or pressed status changed?
            cmpu @KEY_TEXT @text
            or %F @temp @temp
            cmpu @KEY_FLAGS @flags
            or %F @temp @temp
            and @temp 0b1 @temp
            ; update Z bit
            or %F @temp %F
            ; jump if nothing changed... Z bit was 0 for both comparisons
            jz @update_keys

            ; update text on screen
            ld @SCREEN_POS @temp
            stb @temp @text
            addu @temp 1 @temp
            st @SCREEN_POS @temp

            #update_keys $
            stb @KEY_TEXT @text
            stb @KEY_FLAGS @flags

            #_ dropreg(text)
            #_ dropreg(flags)
            #_ dropreg(temp)

            jmp @finish_handling

        #device_write_complete $
            jmp @finish_handling

    #finish_handling $
        resar
        ret

~@START
    #hlt $
        jmp @hlt

#DATA $ + 16
~@DATA
    #SCREEN_POS $
        . word @TEXT_BUF_1

    #STR_16_BUF $
    . ascii "\0"*16

    #KEY_DATA $
        #KEY_DATA_KEY $
        . word 0
        #KEY_DATA_TEXT $
        . byte 0
        #KEY_DATA_FLAGS $
        . byte 0

    #KEY_TEXT $
    . byte 0

    #KEY_FLAGS $
    . byte 0
